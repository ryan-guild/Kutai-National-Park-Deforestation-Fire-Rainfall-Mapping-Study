//Code for this validation approach adapted from UN-SPIDER tutorial at https://www.un-spider.org/advisory-support/recommended-practices/recommended-practice-burn-severity/burn-severity-earth-engine

//1 - Create a cloud-mask function
//Bit 3 is cloud; bit 5 is cloud shadow; mask these
function maskL8(col) {
  var cloudshadowbitmask = (1 << 3);
  var cloudsbitmask = (1 << 5);
  var qa = col.select('pixel_qa');
  var mask = qa.bitwiseAnd(cloudshadowbitmask).eq(0)
                .and(qa.bitwiseAnd(cloudsbitmask).eq(0));
  return col.updateMask(mask)
}

//2 - Load dataset & set visparams
var image = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .map(maskL8)
                  .filterDate('2015-03-01', '2015-08-30')
                  .filterBounds(roi)
                  .median();

var image2 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterDate('2015-11-15', '2016-05-20')
                  .map(maskL8)
                  .filterBounds(roi)
                  .median();

  print(image, 'collection');
  var vizParams = {
    bands: ['B4', 'B3', 'B2'],
    min: 0,
   max: 3000,
   gamma: 1.4
  };

  Map.addLayer(image, vizParams, 'pre-fire');
  Map.addLayer(image2, vizParams, 'post-fire');
  Map.centerObject(roi)


//3 - Apply NBR classification to pre- and post-fire images
//NBR = (NIR-SWIR2) / (NIR+SWIR2)
var preNBR = image.normalizedDifference(['B5', 'B7']);
var postNBR = image2.normalizedDifference(['B5', 'B7']);

  //Add NBR images to console
  print('Pre-fireNBR:', preNBR);
  print('Post-fireNBR:', postNBR);

//4 - Generate dNBR image
var dNBR_unscaled = preNBR.subtract(postNBR);

  //Scale product to USGS standards
  var dNBR = dNBR_unscaled.multiply(1000);

  //Add the difference image to the console
  print('dNBR:', dNBR);

  //Display Burn Ratio Product in grayscale
  var grey = ['white', 'black'];

  //Display pre- and post-fire NBR separately
  Map.addLayer(preNBR, {min:-1, max:1, palette: grey}, 'Pre-fire NBR');
  Map.addLayer(postNBR, {min:-1, max:1, palette:grey}, 'Post-fire NBR');

  //Display dNBR
  Map.addLayer(dNBR, {min:-1000, max:1000, palette:grey}, 'dNBR greyscale');

//5 - Specify burn severity classes (colors) and add a legend
//Define an SLD style of discrete intervals to apply to the image
var sld_intervals = 
    '<RasterSymbolizer>' +
      '<ColorMap type="intervals" extended="false" >' +
      '<ColorMapEntry color="#ffffff" quantity="-500" label="-500"/>' +
      '<ColorMapEntry color="#7a8737" quantity="-250" label="-250"/>' +
      '<ColorMapEntry color="#acbe4d" quantity="-100" label="-100"/>' +
      '<ColorMapEntry color="#0ae042" quantity="100 label="100"/>' +
      '<ColorMapEntry color="fff70b" quantity="270" label="270"/>' +
      '<ColorMapEntry color="#ffaf38" quantity="440" label="440"/>' +
      '<ColorMapEntry color="#ff641b" quantity="660" label="660"/>' +
      '<ColorMapEntry color="#a41fd6" quantity="2000" label="2000"/>' +
      '</ColorMap>' +
      '</RasterSymbolizer>';

  //Add image to the map using both the color ramp and interval schemes
  Map.addLayer(dNBR.sldStyle(sld_intervals), {}, 'dNBR classified');

  //Separate result into 8 burn severity classes
  var thresholds = ee.Image([-1000, -251, -101, 99, 269, 439, 659, 2000]);
  var classified = dNBR.lt(thresholds).reduce('sum').toInt();

  //Add a legend
  //set position of panel
  var legend = ui.Panel({
   style: {
     position: 'bottom-left',
     padding: '8px 15px'
    }});

  //Create legend title
  var legendTitle = ui.Label({
    value: 'dNBR Classes',
   style: {fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
     padding: '0'
  }});

  //Add title to the panel
  legend.add(legendTitle);

  //Creates and styles 1 row of legend
  var makeRow = function(color, name) {
 
  //Create label that is actually the colored box
  var colorBox = ui.Label({
    style: {
      backgroundColor: '#' + color,
      //Use padding to give the box height and width
      padding: '8px',
      margin: '0 0 4px 0'
    }});
  //Create the label filled with description text
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
  //Return the panel
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    })};

  //Palette with the colors
  var palette = ['7a8737', 'acbe4d', '0ae042', 'fff70b', 'ffaf38', 'ff641b', 'a41fd6', 'ffffff'];

  //specify class names in legend
  var names = ['Enhanced Regrowth, High', 'Enhanced Regrowth, Low', 'Unburned', 'Low Severity', 'Moderate-low Severity', 'Moderate-high Severity', 'High Severity', 'NA'];

  //Add color and names
  for (var i=0; i < 8; i++) {
   legend.add(makeRow(palette[i], names[i]));
  }
